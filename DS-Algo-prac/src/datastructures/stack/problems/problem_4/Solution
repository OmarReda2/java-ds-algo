    public static boolean isBalancedParentheses(String parentheses) {
        Stack<Character> stack = new Stack<>();
        for (char p : parentheses.toCharArray()) {
            if (p == '(') {
                stack.push(p);
            } else if (p == ')') {
                if (stack.isEmpty() || stack.pop() != '(') {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }




The isBalancedParentheses method takes a string of parentheses as its input, and returns a boolean value indicating whether the parentheses are balanced or not.

Here's how the code works:

It creates an empty stack of characters using the Stack class that we created in these two coding exercises:


Stack<Character> stack = new Stack<>();


It iterates through each character in the input string using a for-each loop.

for (char p : parentheses.toCharArray()) {


If the current character is an opening parenthesis, it pushes it onto the stack.

if (p == '(') {
    stack.push(p);
}


If the current character is a closing parenthesis, it checks if the stack is empty or if the top element of the stack is not an opening parenthesis. If either of these conditions is true, it means that the parentheses are not balanced, so the method returns false.

else if (p == ')') {
    if (stack.isEmpty() || stack.pop() != '(') {
        return false;
    }
}


After iterating through all the characters in the input string, it checks if the stack is empty. If the stack is empty, it means that all the opening parentheses have been matched with closing parentheses, so the method returns true. Otherwise, it means that there are still some opening parentheses left on the stack that have not been matched with closing parentheses, so the method returns false.

return stack.isEmpty();




Code with inline comments:



public static boolean isBalancedParentheses(String parentheses) {
    // Create an empty stack of characters
    Stack<Character> stack = new Stack<>();

    // Iterate through each character in the input string
    for (char p : parentheses.toCharArray()) {
        // If the current character is an opening parenthesis, push it onto the stack
        if (p == '(') {
            stack.push(p);
        }
        // If the current character is a closing parenthesis, check if the stack is empty or
        // if the top element of the stack is not an opening parenthesis. If either of these
        // conditions is true, return false, because the parentheses are not balanced.
        else if (p == ')') {
            if (stack.isEmpty() || stack.pop() != '(') {
                return false;
            }
        }
    }

    // After iterating through all the characters in the input string, check if the stack is
    // empty. If the stack is empty, return true, because all the opening parentheses have been
    // matched with closing parentheses. Otherwise, return false, because there are still some
    // opening parentheses left on the stack that have not been matched with closing parentheses.
    return stack.isEmpty();
}